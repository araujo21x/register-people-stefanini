generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

model User {
  id        String   @id @default(uuid()) @map("_id") @db.Uuid
  email     String   @unique @db.VarChar(225)
  password  String   @db.VarChar(225)
  name      String   @db.VarChar(225)
  lastName  String   @map("last_name") @db.VarChar(225)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // relationship
  people People[]

  @@map("users")
}

model People {
  id          String   @id @default(uuid()) @map("_id") @db.Uuid
  name        String   @db.VarChar(225)
  gender      Gender?
  email       String?  @unique @db.VarChar(225)
  birthday    DateTime @db.Date
  placeBirth  String?  @map("place_birth") @db.VarChar(100)
  nationality String?  @db.VarChar(100)
  cpf         String   @unique @db.VarChar(11)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // relationship
  userId  String   @map("user_id") @db.Uuid
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address Address?

  @@map("people")
}

model Address {
  id           String   @id @default(uuid()) @map("_id") @db.Uuid
  street       String   @db.VarChar(225)
  number       String   @default("N/A") @db.VarChar(10)
  complement   String?  @db.VarChar(225)
  neighborhood String   @db.VarChar(225)
  city         String   @db.VarChar(225)
  state        String   @db.VarChar(2)
  zipCode      String   @map("zip_code") @db.VarChar(8)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // relationship
  peopleId String @unique @map("people_id") @db.Uuid
  people   People @relation(fields: [peopleId], references: [id], onDelete: Cascade)

  @@map("addresses")
}
